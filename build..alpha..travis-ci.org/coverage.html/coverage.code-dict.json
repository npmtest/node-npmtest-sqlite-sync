{"/home/travis/build/npmtest/node-npmtest-sqlite-sync/test.js":"/* istanbul instrument in package npmtest_sqlite_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqlite-sync/lib.npmtest_sqlite_sync.js":"/* istanbul instrument in package npmtest_sqlite_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sqlite_sync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sqlite_sync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sqlite-sync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sqlite-sync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sqlite_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sqlite_sync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sqlite_sync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sqlite_sync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sqlite_sync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sqlite_sync.__dirname + '/lib.npmtest_sqlite_sync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sqlite-sync/node_modules/sqlite-sync/sqlite.js":"/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Jayr Alencar\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\n//Testa se é electron, e troca o stderr e stdout para console.\r\n//Test if is Electon, and change sterr e stdout for console.\r\nif(process.versions.electron){\r\n\tprocess.stderr.write = console.error.bind(console); \r\n\tprocess.stdout.write = console.log.bind(console); \r\n}\r\n\r\n//Requeries\r\nvar fs = require('fs');\r\nvar SQL = require('sql.js');\r\nvar path = require('path');\r\nvar events = require('events');\r\n\r\n//Variables\r\nsqlite.prototype.db = null;\r\nsqlite.prototype.buffer = null;\r\nsqlite.prototype.writer = null;\r\nsqlite.prototype.file = null;\r\nsqlite.prototype.sql = '';\r\nsqlite.prototype.debug = false;\r\n\r\nfunction sqlite () {\r\n\t\r\n}\r\n\r\n/**\r\n   * Database connection\r\n   *\r\n   * @param {String|Object} db - File directory+filename | buffer\r\n   * @return {Object}\r\n   */\r\n   sqlite.prototype.connect = function(db){\r\n   \tif(typeof(db)=='string'){\r\n   \t\tthis.file = db;\r\n\t\tif (!db || db === ':memory:' || db.indexOf('file::memory:') === 0) {\r\n\t\t\tthis.buffer = new Buffer(0);\r\n\t\t} else if(fs.existsSync(this.file)){\r\n   \t\t\tthis.buffer = fs.readFileSync(this.file);\r\n   \t\t}\r\n   \t}else if(typeof(db)==\"object\"){\r\n   \t\tthis.buffer = db;\r\n   \t}\r\n\r\n   \tif(this.buffer){\r\n   \t\ttry{\r\n   \t\t\tthis.db = new SQL.Database(this.buffer);\t\r\n   \t\t}catch(x){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t}else{\r\n   \t\ttry{\r\n   \t\t\tthis.db = new SQL.Database();\t\r\n   \t\t\tthis.write();\r\n   \t\t}catch(x){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t}\r\n\r\n   \treturn this;\t\r\n   }\r\n\r\n/**\r\n\t* Alternative connection\r\n\t*/\r\n\tsqlite.prototype.con = sqlite.prototype.connect;\r\n\r\n/**\r\n   * Runing queries | Sync & Async\r\n   *\r\n   * @param {String} sql - SQL code\r\n   * @param {Array|Function} options - Array to prepared sql | callback function\r\n   * @param {Function} callback - callback function\r\n   * @return {Array|Object}\r\n   */\r\n   sqlite.prototype.run = function(sql, options, callback) {\r\n   \tif(typeof(options) == \"function\"){\r\n   \t\tcallback = options;\r\n   \t\toptions = [];\r\n   \t}\r\n   \tvar results;\r\n   \tvar type = sql.substring(0,6);\r\n   \ttype = type.toUpperCase();\r\n   \tswitch(type){\r\n   \t\tcase \"SELECT\": results = this.pvSELECT(sql, options); break;\r\n   \t\tcase \"INSERT\": results = this.pvINSERT(sql, options); break;\r\n   \t\tcase \"UPDATE\": results = this.pvUPDATE(sql, options); break;\r\n   \t\tcase \"DELETE\": results = this.pvDELETE(sql, options); break;\r\n   \t\tcase \"PRAGMA\": results = this.pvPRAGMA(sql, options); break;\r\n   \t\tdefault: results = this.runAll(sql)\r\n   \t}\r\n   \tif(callback){\r\n   \t\tcallback(results);\r\n   \t\treturn this;\r\n   \t}else{\r\n   \t\treturn results;\r\n   \t}\r\n   };\r\n\r\n/**\r\n   * Runing queries Async\r\n   *\r\n   * @param {String} sql - SQL code\r\n   * @param {Array|Function} options - Array to prepared sql | callback function\r\n   * @param {Function} callback - callback function\r\n   * @return {Array|Object} \r\n\r\n   * @observation: This function will no longer be used soon!\r\n   */\r\n   sqlite.prototype.runAsync = function(sql, options, callback){\r\n   \tthis.sql = sql;\r\n   \tif(typeof(options) == \"function\"){\r\n   \t\toptions(this.run(sql));\r\n   \t}else{\r\n   \t\tcallback(this.run(sql, options));\r\n   \t}\r\n   \treturn this;\r\n   }\r\n\r\n/**\r\n\t* PRAGMA statements\r\n\t*\r\n\t* @param {String} sql - SQL statement\r\n\t* @param {Array} where - Array ti prepared sql\r\n\t* @return {Object}\r\n\t*/\r\n\tsqlite.prototype.pvPRAGMA = function(sql, where) {\r\n\t\tif((sql.split('=')).length>1){\r\n\t\t// update\r\n\t\treturn this.pvUPDATE(sql, where);\r\n\t}else{\r\n\t\t// get\r\n\t\treturn this.pvSELECT(sql, where);\r\n\t}\r\n};\r\n\r\n/**\r\n   * Runing selects - PRIVATE\r\n   *\r\n   * @param {String}  sql - SQL code\r\n   * @param {Array} where - Array to prepared sql \r\n   * @return {Object}\r\n   */\r\n   sqlite.prototype.pvSELECT = function(sql, where){\r\n   \tif(where){\r\n   \t\tfor(var i = 0 ; i < where.length; i++){\r\n   \t\t\tsql = sql.replace('?',\"\\'\"+where[i]+\"\\'\");\r\n   \t\t}\r\n   \t}\r\n   \tthis.sql = sql;\r\n   \ttry{\r\n   \t\tvar contents = this.db.exec(sql);\t\r\n   \t\tif(contents.length){\r\n   \t\t\tvar columns = contents[0].columns;\r\n   \t\t\tvar values = contents[0].values;\r\n   \t\t\tvar resultado = [];\r\n   \t\t\tfor(var i = 0 ; i < values.length ; i++){\r\n   \t\t\t\tvar linha = {};\r\n   \t\t\t\tfor(var j = 0 ; j < columns.length; j++){\r\n   \t\t\t\t\tlinha[columns[j]] = values[i][j]\r\n   \t\t\t\t}\r\n   \t\t\t\tresultado.push(linha);\r\n   \t\t\t}\r\n   \t\t\treturn resultado;\r\n   \t\t}else{\r\n   \t\t\treturn [];\r\n   \t\t}\r\n   \t}catch(x){\r\n   \t\tif(this.debug){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t\treturn {error:x}\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing deletes - PRIVATE\r\n   *\r\n   * @param {String}  sql - SQL code\r\n   * @param {Array} where - Array to prepared sql \r\n   * @return {Boo}\r\n   */\r\n   sqlite.prototype.pvDELETE = function(sql, where){\r\n   \tif(where){\r\n   \t\tfor(var i = 0 ; i < where.length; i++){\r\n   \t\t\tsql = sql.replace('?',where[i]);\r\n   \t\t}\r\n   \t}\r\n   \tthis.sql = sql;\r\n   \ttry{\r\n   \t\tthis.db.exec(sql);\t\r\n   \t\tthis.write();\r\n   \t\treturn this.db.getRowsModified();\r\n   \t}catch(x){\r\n   \t\tif(this.debug){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t\treturn {error:x};\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing insets - PRIVATE\r\n   *\r\n   * @param {String}  sql - SQL code\r\n   * @param {Array} data - Array to prepared sql \r\n   * @return {Int} last insert id\r\n   */\r\n   sqlite.prototype.pvINSERT = function(sql,data){\r\n   \tif(data){\r\n   \t\tfor(var i = 0 ; i < data.length; i++){\r\n   \t\t\tsql = sql.replace('?',\"'\"+data[i]+\"'\");\r\n   \t\t}\r\n   \t}\r\n   \tthis.sql = sql;\r\n   \ttry{\r\n   \t\tthis.db.run(sql);\r\n   \t\tvar last = this.pvSELECT(\"SELECT last_insert_rowid()\");\r\n   \t\tthis.write();\r\n   \t\treturn last[0]['last_insert_rowid()'];\r\n   \t}catch(x){\r\n   \t\tif(this.debug){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t\treturn {error:x};\r\n   \t}\r\n\r\n   }\r\n\r\n/**\r\n   * Runing updates - PRIVATE\r\n   *\r\n   * @param {String}  sql - SQL code\r\n   * @param {Array} data - Array to prepared sql \r\n   * @return {Boo} \r\n   */\r\n   sqlite.prototype.pvUPDATE = function(sql, data){\r\n   \tif(data){\r\n   \t\tfor(var i = 0 ; i < data.length; i++){\r\n   \t\t\tsql = sql.replace('?',\"'\"+data[i]+\"'\");\r\n   \t\t}\r\n   \t}\r\n   \tthis.sql = sql;\r\n   \ttry{\r\n   \t\tthis.db.run(sql)\r\n   \t\tthis.write();\r\n   \t\treturn this.db.getRowsModified();\r\n   \t}catch (x){\r\n   \t\tif(this.debug){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t\treturn {error:x};\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing INSERT - Publics\r\n   *\r\n   * @param {String}  entity - Name of database table\r\n   * @param {Object} data - Object to be inserted\r\n   * @param {Function} callback - callback function\r\n   * @return {Int|Object} - insert id | instance\r\n   */\r\n   sqlite.prototype.insert = function(entity, data, callback){\r\n   \tvar keys = [];\r\n   \tvar values = []\r\n   \tfor(key in data){\r\n   \t\tkeys.push(key);\r\n   \t\tvalues.push(data[key]);\r\n   \t}\r\n\r\n   \tvar sql = \"INSERT INTO \"+entity+\" (\"+keys.join(',')+\") VALUES ('\"+values.join(\"','\")+\"')\";\r\n   \tthis.sql = sql;\r\n   \tif(callback){\r\n   \t\tcallback(this.run(sql));\r\n   \t\treturn this;\r\n   \t}else{\r\n   \t\treturn this.run(sql);\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing UPDATE - Publics\r\n   *\r\n   * @param {String}  entity - Name of database table\r\n   * @param {Object} data - Object to be updated\r\n   * @param {Object|Function} clause - Object with wheres | callback function\r\n   * @param {Function} callback - callback function\r\n   * @return {Boo|Object} - result | instance\r\n   */\r\n   sqlite.prototype.update = function(entity, data, clause, callback){\r\n   \tvar sets = [];\r\n   \tvar where = [];\r\n   \tif(typeof(clause)==\"function\"){\r\n   \t\tcallback = clause;\r\n   \t\tclause = {};\r\n   \t}\r\n   \tfor(key in data){\r\n   \t\tsets.push(key+\" = '\"+data[key]+\"'\");\r\n   \t}\r\n   \tfor(key in clause){\r\n   \t\twhere.push(key+\" = '\"+clause[key]+\"'\");\r\n   \t}\r\n\r\n   \tvar sql = \"UPDATE \"+entity+\" SET \"+sets.join(', ')+(where.length>0?\" WHERE \"+where.join(\" AND \"):\"\");\r\n\r\n   \tthis.sql = sql;\r\n\r\n   \tif(callback){\r\n   \t\tcallback(this.run(sql));\r\n   \t\treturn this;\r\n   \t}else{\r\n   \t\treturn this.run(sql);\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing DELETE - Publics\r\n   *\r\n   * @param {String}  entity - Name of database table\r\n   * @param {Object|Function} clause - Object with wheres | callback function\r\n   * @param {Function} callback - callback function\r\n   * @return {Boo|Object} - result | instance\r\n   */\r\n   sqlite.prototype.delete = function(entity, clause, callback){\r\n   \tvar where = [];\r\n   \tif(typeof(clause)==\"function\"){\r\n   \t\tcallback = clause;\r\n   \t\tclause = [];\r\n   \t}\r\n\r\n   \tif(clause){\r\n   \t\tfor(key in clause){\r\n   \t\t\twhere.push(key+\" = '\"+clause[key]+\"'\");\r\n   \t\t}\r\n   \t}\r\n\r\n   \tvar sql = \"DELETE FROM \"+entity+\" WHERE \"+where.join(\" AND \");\r\n\r\n   \tthis.sql = sql;\r\n\r\n   \tvar result = this.pvDELETE(sql);\r\n\r\n   \tif(callback){\r\n   \t\tcallback(result);\r\n   \t\treturn this;\r\n   \t}else{\r\n   \t\treturn result;\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Runing All - PRIVATE\r\n   *\r\n   * @param {String}  sql - SQL\r\n   * @return {Boo} \r\n   */\r\n   sqlite.prototype.runAll = function(sql){\r\n   \tthis.sql = sql;\r\n   \ttry{\r\n   \t\tvar tes = this.db.exec(sql)\r\n   \t\tthis.write();\r\n   \t\treturn tes;\r\n   \t}catch (x){\r\n   \t\tif(this.debug){\r\n   \t\t\tthrow x;\r\n   \t\t}\r\n   \t\treturn {error:x};\r\n   \t}\r\n   }\r\n\r\n/**\r\n   * Writing file or calling buffer callback\r\n   *\r\n   * @return {Object} \r\n   */\r\n   sqlite.prototype.write = function(){\r\n   \tvar data = this.db.export();\r\n   \tvar buffer = new Buffer(data);\r\n\r\n   \tif(this.file){\r\n   \t\tfs.writeFileSync(this.file, buffer);\r\n   \t}else if(this.writer && typeof(this.writer) == 'function' ){\r\n   \t\tthis.writer(buffer);\r\n   \t}\r\n   \treturn this;\r\n   }\r\n\r\n/*\r\n\t* Creating functions\r\n\t*\r\n\t* @param {Function} func - the function\r\n\t* @return {Object} \r\n\t*/\r\n\tsqlite.prototype.create_function = function(func){\r\n\t\tthis.db.create_function(func.name, func);\r\n\t}\r\n\r\n/**\r\n\t* Closing connection\r\n\t*/\r\n\tsqlite.prototype.close = function(){\r\n\t\tthis.db.close();\r\n\t}\r\n\r\n/**\r\n\t* Get current sql\r\n\t* @return {String}\r\n\t*/\r\n\tsqlite.prototype.getSql = function(){\r\n\t\treturn this.sql;\r\n\t}\r\n\r\n// Exporting module\r\nmodule.exports = new sqlite();\r\n"}